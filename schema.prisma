// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      UserRole
  apiKey    String?  @unique

  // Relations
  ConversionRequests ConversionRequest[]
}

model ConversionRequest {
  id              String    @id @default(dbgenerated("gen_random_uuid()"))
  sourceTimestamp DateTime
  sourceTimeZone  String
  targetTimeZone  String
  convertedTime   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  // Keeping track of which User made the request
  userId          String?
  User            User?     @relation(fields: [userId], references: [id])

  // For logging and monitoring purposes
  Logs Log[]
}

model Log {
  id                  String             @id @default(dbgenerated("gen_random_uuid()"))
  action              String
  description         String?
  createdAt           DateTime           @default(now())
  ConversionRequestId String?
  ConversionRequest   ConversionRequest? @relation(fields: [ConversionRequestId], references: [id])
}

model Monitoring {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  name       String // Such as CPU Usage, Memory Usage
  value      Float // Metric value
  measuredAt DateTime @default(now())
}

enum UserRole {
  ADMIN
  USER
  SUBSCRIBER
}

